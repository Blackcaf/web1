# –ö—Ä–∞—à-—Ç–µ—Å—Ç FastCGI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Windows
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

$baseUrl = "http://localhost:29111/calculate"
$totalRequests = 100
$successCount = 0
$failCount = 0

Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∞—à-—Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞..." -ForegroundColor Cyan
Write-Host "üìç URL: $baseUrl" -ForegroundColor White
Write-Host "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: $totalRequests" -ForegroundColor White
Write-Host ""

# –ú–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
$testCases = @(
    '{"x":1,"y":1,"r":2}',
    '{"x":-1,"y":1,"r":2}',
    '{"x":-0.5,"y":-0.5,"r":2}',
    '{"x":0.5,"y":-0.5,"r":2}',
    '{"x":0,"y":0,"r":2}'
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
function Send-TestRequest {
    param(
        [string]$data
    )

    try {
        $response = Invoke-WebRequest -Uri $baseUrl `
            -Method POST `
            -ContentType "application/json" `
            -Body $data `
            -TimeoutSec 5

        $script:successCount++
        Write-Host "‚úÖ –£—Å–ø–µ—Ö: $data" -ForegroundColor Green
        return $true
    }
    catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        $script:failCount++

        if ($statusCode -eq 400 -or $statusCode -eq 500) {
            Write-Host "‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ ($statusCode): $data" -ForegroundColor Yellow
        }
        else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ ($statusCode): $data" -ForegroundColor Red
            Write-Host "   –°–æ–æ–±—â–µ–Ω–∏–µ: $($_.Exception.Message)" -ForegroundColor Red
        }
        return $false
    }
}

# –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
Write-Host "üìã –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã..." -ForegroundColor Cyan
for ($i = 0; $i -lt $totalRequests; $i++) {
    $data = $testCases[$i % $testCases.Count]
    Send-TestRequest -data $data

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
    if (($i + 1) % 10 -eq 0) {
        Write-Host "   –ü—Ä–æ–≥—Ä–µ—Å—Å: $($i + 1)/$totalRequests" -ForegroundColor Gray
    }
}
Write-Host ""

# –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
Write-Host "üìã –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)..." -ForegroundColor Cyan
$jobs = @()
for ($i = 0; $i -lt 10; $i++) {
    $data = $testCases[$i % $testCases.Count]
    $jobs += Start-Job -ScriptBlock {
        param($url, $body)
        try {
            Invoke-WebRequest -Uri $url -Method POST -ContentType "application/json" -Body $body -TimeoutSec 5
        }
        catch {
            $_.Exception
        }
    } -ArgumentList $baseUrl, $data
}

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
$jobs | Wait-Job | ForEach-Object {
    $result = Receive-Job $_
    if ($result -is [Microsoft.PowerShell.Commands.WebResponseObject]) {
        $script:successCount++
        Write-Host "‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω" -ForegroundColor Green
    }
    else {
        $script:failCount++
        Write-Host "‚ùå –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω" -ForegroundColor Red
    }
    Remove-Job $_
}
Write-Host ""

# –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
Write-Host "üìã –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ..." -ForegroundColor Cyan
$invalidCases = @(
    '{"x":10,"y":1,"r":2}',           # X –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    '{"x":1,"y":10,"r":2}',           # Y –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    '{"x":1,"y":1,"r":10}',           # R –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    '{"x":"abc","y":1,"r":2}',        # X –Ω–µ —á–∏—Å–ª–æ
    '{"x":1,"y":"xyz","r":2}',        # Y –Ω–µ —á–∏—Å–ª–æ
    '{"invalid":"json"}',              # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ''                                 # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
)

foreach ($data in $invalidCases) {
    try {
        $response = Invoke-WebRequest -Uri $baseUrl `
            -Method POST `
            -ContentType "application/json" `
            -Body $data `
            -TimeoutSec 5

        Write-Host "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –¥–ª—è: $data" -ForegroundColor Red
        $script:failCount++
    }
    catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        if ($statusCode -eq 400 -or $statusCode -eq 500) {
            Write-Host "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: $data (–∫–æ–¥ $statusCode)" -ForegroundColor Green
            $script:successCount++
        }
        else {
            Write-Host "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ $statusCode –¥–ª—è: $data" -ForegroundColor Red
            $script:failCount++
        }
    }
}
Write-Host ""

# –¢–µ—Å—Ç 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
Write-Host "üìã –¢–µ—Å—Ç 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è..." -ForegroundColor Cyan
$boundaryCases = @(
    '{"x":-2,"y":4.9999,"r":1}',      # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    '{"x":2,"y":-2.9999,"r":3}',
    '{"x":0,"y":0,"r":1.5}',
    '{"x":-3,"y":1,"r":2}',           # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É X
    '{"x":1,"y":-3,"r":2}',           # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É Y
    '{"x":1,"y":5,"r":2}'             # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É Y
)

foreach ($data in $boundaryCases) {
    Send-TestRequest -data $data
}
Write-Host ""

# –¢–µ—Å—Ç 5: –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
Write-Host "üìã –¢–µ—Å—Ç 5: –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (20 –∑–∞–ø—Ä–æ—Å–æ–≤)..." -ForegroundColor Cyan
for ($i = 0; $i -lt 20; $i++) {
    Send-TestRequest -data '{"x":1,"y":1,"r":2}'
    Start-Sleep -Milliseconds 10
}
Write-Host ""

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
Write-Host "üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" -ForegroundColor Yellow
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
Write-Host "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: $successCount" -ForegroundColor Green
Write-Host "‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: $failCount" -ForegroundColor Red
$total = $successCount + $failCount
if ($total -gt 0) {
    $successRate = [math]::Round(($successCount / $total) * 100, 2)
    Write-Host "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $successRate%" -ForegroundColor Yellow
}
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$logFile = "test-results_$timestamp.txt"
$results = @"
–ö–†–ê–®-–¢–ï–°–¢ –°–ï–†–í–ï–†–ê
–î–∞—Ç–∞: $(Get-Date)
URL: $baseUrl

–†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –£—Å–ø–µ—à–Ω—ã—Ö: $successCount
- –ù–µ—É–¥–∞—á–Ω—ã—Ö: $failCount
- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $successRate%

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –¢–ï–°–¢–´:
1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: $totalRequests
2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 10
3. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $($invalidCases.Count)
4. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: $($boundaryCases.Count)
5. –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 20
"@

$results | Out-File -FilePath $logFile -Encoding UTF8
Write-Host ""
Write-Host "üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $logFile" -ForegroundColor Cyan