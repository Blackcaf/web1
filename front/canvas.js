// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è canvas
let canvas;
let ctx;
let canvasSize = 600;
let center;
let scale;
let points = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeCanvas();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
function initializeCanvas() {
    canvas = document.getElementById('coordinatePlane');
    if (!canvas) return;

    ctx = canvas.getContext('2d');
    center = canvasSize / 2;

    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± - —Ç–µ–ø–µ—Ä—å –≥—Ä–∞—Ñ–∏–∫ –±–æ–ª—å—à–µ!
    scale = canvasSize / 8; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç -4 –¥–æ +4, –Ω–æ –≥—Ä–∞—Ñ–∏–∫ –∫—Ä—É–ø–Ω–µ–µ

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ canvas
    canvas.addEventListener('click', handleCanvasClick);

    // –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    drawCoordinatePlane();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
function drawCoordinatePlane() {
    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.clearRect(0, 0, canvasSize, canvasSize);

    // –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvasSize, canvasSize);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
    if (window.currentR && window.currentR()) {
        drawAreas(window.currentR());
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
    drawGrid();

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π
    drawAxes();

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç–æ–∫ —Å R-—à–∫–∞–ª–æ–π
    drawLabelsWithRScale();

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    drawAllPoints();
}

// ‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–õ–ê–°–¢–ò - —á–µ—Ç–≤–µ—Ä—Ç—å –∫—Ä—É–≥–∞ –°–õ–ï–í–ê –°–ù–ò–ó–£ ‚≠ê
function drawAreas(r) {
    const rPixels = r * scale; // R –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    const halfRPixels = rPixels / 2; // R/2 –≤ –ø–∏–∫—Å–µ–ª—è—Ö

    ctx.save();
    ctx.globalAlpha = 0.4;

    // üîµ –û–ë–õ–ê–°–¢–¨ 1: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –°–õ–ï–í–ê –°–í–ï–†–•–£ (2-–π –∫–≤–∞–¥—Ä–∞–Ω—Ç)
    // X: –æ—Ç -R/2 –¥–æ 0, Y: –æ—Ç 0 –¥–æ R
    ctx.fillStyle = '#4A90E2'; // –°–∏–Ω–∏–π
    ctx.fillRect(
        center - halfRPixels,  // x = -R/2
        center - rPixels,      // y = R (–ø–æ–º–Ω–∏–º, —á—Ç–æ Y –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
        halfRPixels,           // width = R/2
        rPixels                // height = R
    );

    // üü† –û–ë–õ–ê–°–¢–¨ 2: –ß–µ—Ç–≤–µ—Ä—Ç—å –∫—Ä—É–≥–∞ –°–õ–ï–í–ê –°–ù–ò–ó–£ (3-–π –∫–≤–∞–¥—Ä–∞–Ω—Ç) - –ò–°–ü–†–ê–í–õ–ï–ù–û!
    // –†–∞–¥–∏—É—Å R/2, —Ü–µ–Ω—Ç—Ä –≤ (0,0)
    ctx.fillStyle = '#FF9500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    ctx.beginPath();
    ctx.arc(center, center, halfRPixels, Math.PI, 3*Math.PI/2); // –æ—Ç 180¬∞ –¥–æ 270¬∞
    ctx.lineTo(center, center); // –ª–∏–Ω–∏—è –∫ —Ü–µ–Ω—Ç—Ä—É
    ctx.closePath();
    ctx.fill();

    // üü¢ –û–ë–õ–ê–°–¢–¨ 3: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –°–ü–†–ê–í–ê –°–ù–ò–ó–£ (4-–π –∫–≤–∞–¥—Ä–∞–Ω—Ç)
    // X: –æ—Ç 0 –¥–æ R/2, Y: –æ—Ç 0 –¥–æ -R
    ctx.fillStyle = '#34C759'; // –ó–µ–ª–µ–Ω—ã–π
    ctx.beginPath();
    ctx.moveTo(center, center);                    // (0, 0)
    ctx.lineTo(center + halfRPixels, center);      // (R/2, 0)
    ctx.lineTo(center, center + rPixels);          // (0, -R)
    ctx.closePath();
    ctx.fill();

    ctx.restore();

    // –ö–æ–Ω—Ç—É—Ä—ã –æ–±–ª–∞—Å—Ç–µ–π
    ctx.strokeStyle = '#1D1D1F';
    ctx.lineWidth = 2.5;
    ctx.globalAlpha = 1;

    // –ö–æ–Ω—Ç—É—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    ctx.strokeRect(
        center - halfRPixels,
        center - rPixels,
        halfRPixels,
        rPixels
    );

    // –ö–æ–Ω—Ç—É—Ä —á–µ—Ç–≤–µ—Ä—Ç–∏ –∫—Ä—É–≥–∞
    ctx.beginPath();
    ctx.arc(center, center, halfRPixels, Math.PI, 3*Math.PI/2);
    ctx.stroke();

    // –ö–æ–Ω—Ç—É—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    ctx.beginPath();
    ctx.moveTo(center, center);
    ctx.lineTo(center + halfRPixels, center);
    ctx.lineTo(center, center + rPixels);
    ctx.closePath();
    ctx.stroke();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ —Å R-–¥–µ–ª–µ–Ω–∏—è–º–∏
function drawGrid() {
    const currentR = window.currentR ? window.currentR() : 2; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π R –¥–ª—è —Å–µ—Ç–∫–∏
    const rPixels = currentR * scale;
    const halfRPixels = rPixels / 2;

    ctx.strokeStyle = '#E5E5E7';
    ctx.lineWidth = 1;

    // –°–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ R/2
    const step = halfRPixels;

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = center - 4*rPixels; i <= center + 4*rPixels; i += step) {
        if (i >= 0 && i <= canvasSize) {
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, canvasSize);
            ctx.stroke();
        }
    }

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = center - 4*rPixels; i <= center + 4*rPixels; i += step) {
        if (i >= 0 && i <= canvasSize) {
            ctx.beginPath();
            ctx.moveTo(0, i);
            ctx.lineTo(canvasSize, i);
            ctx.stroke();
        }
    }

    // –ë–æ–ª–µ–µ —Ç–æ–ª—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è R-–¥–µ–ª–µ–Ω–∏–π
    ctx.strokeStyle = '#D1D1D6';
    ctx.lineWidth = 1.5;

    // –õ–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ R
    const mainStep = rPixels;

    for (let i = center - 4*rPixels; i <= center + 4*rPixels; i += mainStep) {
        if (i >= 0 && i <= canvasSize) {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, canvasSize);
            ctx.stroke();

            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ
            ctx.beginPath();
            ctx.moveTo(0, i);
            ctx.lineTo(canvasSize, i);
            ctx.stroke();
        }
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function drawAxes() {
    ctx.strokeStyle = '#1D1D1F';
    ctx.lineWidth = 3;

    // –û—Å—å X
    ctx.beginPath();
    ctx.moveTo(0, center);
    ctx.lineTo(canvasSize, center);
    ctx.stroke();

    // –û—Å—å Y
    ctx.beginPath();
    ctx.moveTo(center, 0);
    ctx.lineTo(center, canvasSize);
    ctx.stroke();

    // –°—Ç—Ä–µ–ª–∫–∏ –æ—Å–µ–π
    drawArrow(canvasSize - 20, center, canvasSize - 5, center); // X
    drawArrow(center, 20, center, 5); // Y
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏
function drawArrow(x1, y1, x2, y2) {
    ctx.strokeStyle = '#1D1D1F';
    ctx.lineWidth = 3;
    ctx.fillStyle = '#1D1D1F';

    const angle = Math.atan2(y2 - y1, x2 - x1);
    const arrowLength = 15;

    ctx.beginPath();
    ctx.moveTo(x2 - arrowLength * Math.cos(angle - Math.PI/6), y2 - arrowLength * Math.sin(angle - Math.PI/6));
    ctx.lineTo(x2, y2);
    ctx.lineTo(x2 - arrowLength * Math.cos(angle + Math.PI/6), y2 - arrowLength * Math.sin(angle + Math.PI/6));
    ctx.stroke();
}

// üìè R-–®–ö–ê–õ–ê –í–ú–ï–°–¢–û –¶–ò–§–†
function drawLabelsWithRScale() {
    const currentR = window.currentR ? window.currentR() : null;

    // –ï—Å–ª–∏ R –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
    if (!currentR) {
        drawRegularLabels();
        return;
    }

    const rPixels = currentR * scale;
    const halfRPixels = rPixels / 2;

    ctx.fillStyle = '#1D1D1F';
    ctx.font = 'bold 16px -apple-system, BlinkMacSystemFont, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // R-–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å—è—Ö
    const rDivisions = [
        { value: -2, label: '-2R', pixels: -2 * rPixels },
        { value: -1.5, label: '-3R/2', pixels: -1.5 * rPixels },
        { value: -1, label: '-R', pixels: -rPixels },
        { value: -0.5, label: '-R/2', pixels: -halfRPixels },
        { value: 0.5, label: 'R/2', pixels: halfRPixels },
        { value: 1, label: 'R', pixels: rPixels },
        { value: 1.5, label: '3R/2', pixels: 1.5 * rPixels },
        { value: 2, label: '2R', pixels: 2 * rPixels }
    ];

    rDivisions.forEach(div => {
        // –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X
        const x = center + div.pixels;
        if (x >= 40 && x <= canvasSize - 40) {
            // –¶–≤–µ—Ç –º–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            if (div.value === 1 || div.value === -1) {
                ctx.fillStyle = '#007AFF'; // –°–∏–Ω–∏–π –¥–ª—è R
            } else if (div.value === 0.5 || div.value === -0.5) {
                ctx.fillStyle = '#FF9500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è R/2
            } else {
                ctx.fillStyle = '#666666'; // –°–µ—Ä—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            }

            ctx.fillText(div.label, x, center + 30);

            // –î–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–∏ X
            ctx.strokeStyle = ctx.fillStyle;
            ctx.lineWidth = div.value === 1 || div.value === -1 || div.value === 0.5 || div.value === -0.5 ? 3 : 2;
            ctx.beginPath();
            ctx.moveTo(x, center - 12);
            ctx.lineTo(x, center + 12);
            ctx.stroke();
        }

        // –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ Y
        const y = center - div.pixels; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Y
        if (y >= 40 && y <= canvasSize - 40) {
            // –¶–≤–µ—Ç –º–µ—Ç–∫–∏
            if (div.value === 1 || div.value === -1) {
                ctx.fillStyle = '#007AFF'; // –°–∏–Ω–∏–π –¥–ª—è R
            } else if (div.value === 0.5 || div.value === -0.5) {
                ctx.fillStyle = '#FF9500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è R/2
            } else {
                ctx.fillStyle = '#666666'; // –°–µ—Ä—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            }

            ctx.fillText(div.label, center - 35, y);

            // –î–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–∏ Y
            ctx.strokeStyle = ctx.fillStyle;
            ctx.lineWidth = div.value === 1 || div.value === -1 || div.value === 0.5 || div.value === -0.5 ? 3 : 2;
            ctx.beginPath();
            ctx.moveTo(center - 12, y);
            ctx.lineTo(center + 12, y);
            ctx.stroke();
        }
    });

    // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
    ctx.font = 'bold 20px -apple-system, BlinkMacSystemFont, sans-serif';
    ctx.fillStyle = '#1D1D1F';
    ctx.fillText('X', canvasSize - 35, center - 25);
    ctx.fillText('Y', center + 25, 35);
    ctx.fillText('0', center - 25, center + 25);
}

// –û–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–µ—Ç–∫–∏ (–µ—Å–ª–∏ R –Ω–µ –≤—ã–±—Ä–∞–Ω)
function drawRegularLabels() {
    ctx.fillStyle = '#1D1D1F';
    ctx.font = 'bold 16px -apple-system, BlinkMacSystemFont, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è
    const divisions = [-3, -2, -1, 1, 2, 3];

    divisions.forEach(i => {
        const x = center + i * scale;
        const y = center - i * scale;

        // –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X
        if (x >= 20 && x <= canvasSize - 20) {
            ctx.fillText(i.toString(), x, center + 25);

            ctx.strokeStyle = '#1D1D1F';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(x, center - 10);
            ctx.lineTo(x, center + 10);
            ctx.stroke();
        }

        // –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ Y
        if (y >= 20 && y <= canvasSize - 20) {
            ctx.fillText(i.toString(), center - 25, y);

            ctx.strokeStyle = '#1D1D1F';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(center - 10, y);
            ctx.lineTo(center + 10, y);
            ctx.stroke();
        }
    });

    // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
    ctx.font = 'bold 20px -apple-system, BlinkMacSystemFont, sans-serif';
    ctx.fillStyle = '#1D1D1F';
    ctx.fillText('X', canvasSize - 35, center - 25);
    ctx.fillText('Y', center + 25, 35);
    ctx.fillText('0', center - 25, center + 25);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas
function handleCanvasClick(event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
    const mathX = (x - center) / scale;
    const mathY = -(y - center) / scale; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y

    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (0.1)
    const roundedX = Math.round(mathX * 10) / 10;
    const roundedY = Math.round(mathY * 10) / 10;

    console.log(`–ö–ª–∏–∫: –ø–∏–∫—Å–µ–ª–∏ (${x.toFixed(1)}, ${y.toFixed(1)}) -> –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (${roundedX}, ${roundedY})`);

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∏–∑ main script
    if (window.addPointFromCanvas) {
        window.addPointFromCanvas(roundedX, roundedY);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–∞ canvas
function addPointToCanvas(x, y, hit, r) {
    points.push({ x, y, hit, r });
    drawPoint(x, y, hit, r);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
function drawPoint(x, y, hit, r) {
    const pixelX = center + x * scale;
    const pixelY = center - y * scale; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y

    ctx.save();

    // –¶–≤–µ—Ç —Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è
    ctx.fillStyle = hit ? '#34C759' : '#FF3B30'; // iOS —Ü–≤–µ—Ç–∞
    ctx.strokeStyle = hit ? '#30A14E' : '#D60A00';
    ctx.lineWidth = 3;

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ—á–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π)
    ctx.beginPath();
    ctx.arc(pixelX, pixelY, 10, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
    if (points.length > 0 && points[points.length - 1].x === x && points[points.length - 1].y === y) {
        ctx.strokeStyle = '#FF9500';
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(pixelX, pixelY, 15, 0, 2 * Math.PI);
        ctx.stroke();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
        setTimeout(() => {
            drawCoordinatePlane();
        }, 2000);
    }

    ctx.restore();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
function drawAllPoints() {
    points.forEach(point => {
        drawPoint(point.x, point.y, point.hit, point.r);
    });
}

// –û—á–∏—Å—Ç–∫–∞ canvas
function clearCanvas() {
    points = [];
    drawCoordinatePlane();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.drawCoordinatePlane = drawCoordinatePlane;
window.addPointToCanvas = addPointToCanvas;
window.clearCanvas = clearCanvas;